package views

import (
	"github.com/iamgoroot/backline/pkg/model"
	"strings"
	"fmt"
)
templ HTMLHeaders() {
    <script src="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js"></script>
}

templ EntityTab(entity *model.Entity) {
    if supported(entity) && entity.Spec.Definition != nil {
        {{ specURL := fmt.Sprintf("/swagger-ui/spec/by-fullname/%s", entity.FullName) }}
        <div id="swagger-ui-container" style="width:100%; height:100%;"></div>
        @templ.JSONScript("specURL", specURL)
        <script>
            (function() {
                const specUrl = JSON.parse(window.specURL.textContent);
                
                function initSwagger() {
                    const host = document.getElementById('swagger-ui-container');
                    const shadow = host.attachShadow({ mode: 'open' });
                    
                    shadow.innerHTML = `
                        <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css" crossorigin="anonymous">
                        <link rel="stylesheet" href="/swagger-ui/css/style.css">
                        <div id="swagger-ui"></div>
                    `;

                    window.SwaggerUIBundle({
                        domNode: shadow.getElementById('swagger-ui'),
                        url: specUrl,
                        presets: [
                            SwaggerUIBundle.presets.editors,
                            SwaggerUIBundle.presets.apis
                        ],
                        layout: "BaseLayout"
                    });
                }

                // Add fallback for content loaded state
                if (document.readyState === 'complete' || document.readyState === 'interactive') {
                    initSwagger();
                } else {
                    document.addEventListener('DOMContentLoaded', initSwagger);
                }
            })();
        </script>
    }
}

templ EntityTabLink(entity *model.Entity) {
    if supported(entity) && entity.Spec.Definition != nil {
        {{ link := fmt.Sprintf("/swagger-ui/render/by-fullname/%s", entity.FullName) }}
        {{ viewLink := fmt.Sprintf("/swagger-ui/view/by-fullname/%s", entity.FullName) }}

        <a class="tab-item" 
           hx-get={ link }
           hx-push-url={ viewLink }
           hx-target="#tab-content">
            Swagger UI
        </a>
    }
}

func supported(entity *model.Entity) bool {
       return strings.EqualFold(entity.Spec.Type, "openapi")
}